CREATE TABLE IF NOT EXISTS Orders (
    OrderID INTEGER PRIMARY KEY AUTOINCREMENT,
    ItemID INTEGER,                         -- Assumes Product or Inventory table has ItemID
    CustomerID INTEGER,                     -- References Customers(CustomerID)
    OrderDate TEXT,                         -- Order date
    Quantity INTEGER,                       -- Quantity ordered
    TotalPrice REAL,                        -- Total price of the order
    Status TEXT,                            -- Order status (e.g., 'Pending', 'Shipped', 'Delivered')
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
WITH RECURSIVE generate_orders AS (
    SELECT 1 AS row_num
    UNION ALL
    SELECT row_num + 1
    FROM generate_orders
    WHERE row_num < 1000
)
INSERT INTO Orders (ItemID, CustomerID, OrderDate, Quantity, TotalPrice, Status)
SELECT
    CASE WHEN abs(random()) % 5 = 0 THEN NULL ELSE abs(random()) % 1000 + 1 END AS ItemID,  -- Randomly insert NULL for ItemID 20% of the time
    (SELECT CustomerID FROM Customers ORDER BY random() LIMIT 1) AS CustomerID,  -- Randomly select a valid CustomerID from Customers table
    (abs(random()) % 5 + 2020) || '-' ||
    substr('0' || (abs(random()) % 12 + 1), -2, 2) || '-' ||
    substr('0' || (abs(random()) % 28 + 1), -2, 2) AS OrderDate,
    CASE WHEN abs(random()) % 10 = 0 THEN NULL ELSE abs(random()) % 10 + 1 END AS Quantity,  -- Randomly insert NULL for Quantity
    CASE WHEN abs(random()) % 5 = 0 THEN NULL ELSE round((abs(random()) % 50000) / 100.0, 2) END AS TotalPrice,  -- Randomly insert NULL for TotalPrice
    CASE abs(random()) % 3 + 1
        WHEN 1 THEN 'Pending'
        WHEN 2 THEN 'Shipped'
        ELSE 'Delivered'
    END AS Status
FROM generate_orders;
